{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"Print to console": {
		"scope": "csharp",
		"prefix": "prepo",
		"body": [
			"using System;",
			"using System.Threading.Tasks;",
			"using <PROJECT>.Infra.Data.Context;",
			"using Microsoft.EntityFrameworkCore;",
			"",
			"namespace <PROJECT>.Infra.Data.Repository.<PATH>.<NAME>",
			"{",
			"    public class <NAME>Repository : I<NAME>Repository",
			"    {",
			"        private readonly <PROJECT>Context _context;",
			"        public <NAME>Repository(<PROJECT>Context context)",
			"        {",
			"            _context = context;",
			"        }",
			"",
			"        public async Task<<NAME>Response> Handle(<NAME>Request request)",
			"        {",
			"            var now = DateTime.UtcNow;",
			"            var strategy = _context.Database.CreateExecutionStrategy();",
			"            var notification = await strategy.ExecuteAsync(async () =>",
			"            {",
			"                await using var transaction = await _context.Database.BeginTransactionAsync();",
			"                try",
			"                {",
			"                    var <OBJECT> = new <ENTITY>()",
			"                    {",
			"                        ",
			"                    };",
			"",
			"                    await _context.<TABLE>.AddAsync(<OBJECT>);",
			"                    await _context.SaveChangesAsync();",
			"                    await transaction.CommitAsync();",
			"",
			"                    return new <NAME>Response();",
			"                }",
			"                 catch(Exception ex)",
			"                 {",
			"                    await transaction.RollbackAsync();",
			"                    throw new Exception(<STRING>, ex);",
			"                 }",
			"            });",
			"            return notification;",
			"        }",
			"    }",
			"}"
		],
		"description": "Create a Post repository"
	}
}