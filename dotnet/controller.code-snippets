{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"Print to console": {
		"scope": "csharp",
		"prefix": "control",
		"body": [
			"using MediatR;",
			"using System.Threading.Tasks;",
			"using Microsoft.AspNetCore.Mvc;",
			"using Microsoft.AspNetCore.Http;",
			"using <PROJECT>.Infra.Shared.Controllers;",
			"using Microsoft.AspNetCore.Authorization;",
			"",
			"namespace <PROJECT>.<PATH>.Controllers",
			"{",
			"   [ApiController]",
			"   [Authorize]",
			"   [Route(api/v2/[controller])]",
			"   public class <NAME>Controller : BaseApiController",
			"   {",
			"       private readonly IMediator _mediator;",
			"       public <NAME>Controller(IMediator mediator)",
			"       {",
			"           _mediator = mediator;",
			"        }",
			"",
			"       [HttpGet]",
			"       [ProducesResponseType(StatusCodes.Status200OK, Type = typeof(<NAME>Response))]",
			"       [ProducesResponseType(StatusCodes.Status401Unauthorized)]",
			"       public async Task<IActionResult> Get()",
			"       {",
			"           return ProcessResponse(await _mediator.Send(new <NAME>Request()",
			"           {",
			"                TenantId = TenantId,",
			"                UserId = UserId",
			"            }));",
			"        }",
			"",
			"       [HttpGet]",
			"       [Route({id})]",
			"       [ProducesResponseType(StatusCodes.Status200OK, Type = typeof(<NAME>Response))]",
			"       [ProducesResponseType(StatusCodes.Status401Unauthorized)]",
			"       public async Task<IActionResult> Get(int id)",
			"       {",
			"            return ProcessResponse(await _mediator.Send(new <NAME>Request()",
			"            {",
			"                TenantId = TenantId,",
			"                UserId = UserId,",
			"                <ID> = id",
			"            }));",
			"        }",
			"",
			"       [HttpPost]",
			"       [ProducesResponseType(StatusCodes.Status200OK, Type = typeof(<NAME>Response))]",
			"       [ProducesResponseType(StatusCodes.Status401Unauthorized)]",
			"       public async Task<IActionResult> Post([FromBody] <NAME>Request request)",
			"       {",
			"           request.TenantId = TenantId;",
			"           request.UserId = UserId;",
			"           return ProcessResponse(await _mediator.Send(request));",
			"        }",
			"",
			"       [HttpPut]",
			"       [Route({id})]",
			"       [ProducesResponseType(StatusCodes.Status200OK, Type = typeof(<NAME>Response))]",
			"       [ProducesResponseType(StatusCodes.Status401Unauthorized)]",
			"       public async Task<IActionResult> Put([FromBody] <NAME>Request request",
			"                                                     , int id)",
			"       {",
			"           request.TenantId = TenantId;",
			"           request.UserId = UserId;",
			"           request.<ID> = id;",
			"           return ProcessResponse(await _mediator.Send(request));",
			"        }",
			"",
			"       [HttpPatch]",
			"       [Route({id})]",
			"       [ProducesResponseType(StatusCodes.Status200OK, Type = typeof(<NAME>Response))]",
			"       [ProducesResponseType(StatusCodes.Status401Unauthorized)]",
			"       public async Task<IActionResult> Patch([FromBody] <NAME>Request request",
			"                                                       , int id)",
			"       {",
			"           request.TenantId = TenantId;",
			"           request.UserId = UserId;",
			"           request.<ID> = id;",
			"           return ProcessResponse(await _mediator.Send(request));",
			"       }",
			"",
			"       [HttpDelete]",
			"       [Route({id})]",
			"       [ProducesResponseType(StatusCodes.Status200OK, Type = typeof(<NAME>Response))]",
			"       [ProducesResponseType(StatusCodes.Status401Unauthorized)]",
			"       public async Task<IActionResult> Delete([FromBody] <NAME>Request request",
			"                                                        , int id)",
			"       {",
			"           request.TenantId = TenantId;",
			"           request.UserId = UserId;",
			"           request.<ID> = id;",
			"           return ProcessResponse(await _mediator.Send(request));",
			"       }",
			"    }",
			"}"
		],
		"description": "Log output to console"
	}
}